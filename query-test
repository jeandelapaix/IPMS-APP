import org.junit.jupiter.api.Test;
import static org.assertj.core.api.Assertions.assertThat;
import static org.junit.jupiter.api.Assertions.assertThrows;

public class DynamicCSVParserTest {

    @Test
    public void testParsePanel_withValidInput_singleGroup() {
        // Arrange
        String csvString = "panelinfo: 433,FIXED;group: 1232,2,1";

        // Act
        PanelDto result = DynamicCSVParser.parsePanel(csvString);

        // Assert
        assertThat(result).isNotNull();
        assertThat(result.getPanelId()).isEqualTo(433L);
        assertThat(result.getApprovalOrder()).isEqualTo("FIXED");

        // Verify group details
        assertThat(result.getGroups()).hasSize(1);
        GroupDto group = result.getGroups().get(0);
        assertThat(group.getGroupId()).isEqualTo(1232L);
        assertThat(group.getApprovalsRequired()).isEqualTo(2);
        assertThat(group.getOrderInPanel()).isEqualTo(1);
    }

    @Test
    public void testParsePanel_withValidInput_multipleGroups() {
        // Arrange
        String csvString = "panelinfo: 433,FIXED;group: 1232,2,1|10622334,1,2";

        // Act
        PanelDto result = DynamicCSVParser.parsePanel(csvString);

        // Assert
        assertThat(result).isNotNull();
        assertThat(result.getPanelId()).isEqualTo(433L);
        assertThat(result.getApprovalOrder()).isEqualTo("FIXED");

        // Verify multiple groups
        assertThat(result.getGroups()).hasSize(2);

        GroupDto group1 = result.getGroups().get(0);
        assertThat(group1.getGroupId()).isEqualTo(1232L);
        assertThat(group1.getApprovalsRequired()).isEqualTo(2);
        assertThat(group1.getOrderInPanel()).isEqualTo(1);

        GroupDto group2 = result.getGroups().get(1);
        assertThat(group2.getGroupId()).isEqualTo(10622334L);
        assertThat(group2.getApprovalsRequired()).isEqualTo(1);
        assertThat(group2.getOrderInPanel()).isEqualTo(2);
    }

    @Test
    public void testParsePanel_withEmptyGroups() {
        // Arrange
        String csvString = "panelinfo: 433,FIXED;group:";

        // Act
        PanelDto result = DynamicCSVParser.parsePanel(csvString);

        // Assert
        assertThat(result).isNotNull();
        assertThat(result.getPanelId()).isEqualTo(433L);
        assertThat(result.getApprovalOrder()).isEqualTo("FIXED");
        assertThat(result.getGroups()).isEmpty(); // No groups
    }

    @Test
    public void testParsePanel_withEmptyPanelDetails() {
        // Arrange
        String csvString = "panelinfo: ,;group: 1232,2,1";

        // Act
        PanelDto result = DynamicCSVParser.parsePanel(csvString);

        // Assert
        assertThat(result).isNotNull();
        assertThat(result.getPanelId()).isNull(); // Null because panelId is empty
        assertThat(result.getApprovalOrder()).isEmpty(); // Empty string
        assertThat(result.getGroups()).hasSize(1); // One group should still be parsed
    }

    @Test
    public void testParsePanel_withInvalidGroupFormat_throwsException() {
        // Arrange
        String invalidCsvString = "panelinfo: 433,FIXED;group: 1232,2"; // Invalid group format (missing third value)

        // Act & Assert
        assertThrows(ArrayIndexOutOfBoundsException.class, () -> {
            DynamicCSVParser.parsePanel(invalidCsvString);
        });
    }

    @Test
    public void testParsePanel_withMissingPanelInfo_throwsException() {
        // Arrange
        String invalidCsvString = "panelinfo: ;group: 1232,2,1"; // Missing panel info

        // Act & Assert
        PanelDto result = DynamicCSVParser.parsePanel(invalidCsvString);
        assertThat(result.getPanelId()).isNull(); // Missing panel ID should result in null
        assertThat(result.getApprovalOrder()).isEmpty(); // Missing approvalOrder should be empty
        assertThat(result.getGroups()).hasSize(1); // Group should still be parsed correctly
    }
}
